// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/environments/remove.go

// Package mock_environments is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockRemoveEnvironmentClient is a mock of removeEnvironmentClient interface.
type MockRemoveEnvironmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemoveEnvironmentClientMockRecorder
}

// MockRemoveEnvironmentClientMockRecorder is the mock recorder for MockRemoveEnvironmentClient.
type MockRemoveEnvironmentClientMockRecorder struct {
	mock *MockRemoveEnvironmentClient
}

// NewMockRemoveEnvironmentClient creates a new mock instance.
func NewMockRemoveEnvironmentClient(ctrl *gomock.Controller) *MockRemoveEnvironmentClient {
	mock := &MockRemoveEnvironmentClient{ctrl: ctrl}
	mock.recorder = &MockRemoveEnvironmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoveEnvironmentClient) EXPECT() *MockRemoveEnvironmentClientMockRecorder {
	return m.recorder
}

// DeleteEnvironment mocks base method.
func (m *MockRemoveEnvironmentClient) DeleteEnvironment(ctx context.Context, nameOrUUID string) (*meroxa.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnvironment", ctx, nameOrUUID)
	ret0, _ := ret[0].(*meroxa.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockRemoveEnvironmentClientMockRecorder) DeleteEnvironment(ctx, nameOrUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockRemoveEnvironmentClient)(nil).DeleteEnvironment), ctx, nameOrUUID)
}
