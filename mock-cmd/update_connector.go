// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/connectors/update_connector.go

// Package mock_connectors is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockUpdateConnectorClient is a mock of updateConnectorClient interface.
type MockUpdateConnectorClient struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateConnectorClientMockRecorder
}

// MockUpdateConnectorClientMockRecorder is the mock recorder for MockUpdateConnectorClient.
type MockUpdateConnectorClientMockRecorder struct {
	mock *MockUpdateConnectorClient
}

// NewMockUpdateConnectorClient creates a new mock instance.
func NewMockUpdateConnectorClient(ctrl *gomock.Controller) *MockUpdateConnectorClient {
	mock := &MockUpdateConnectorClient{ctrl: ctrl}
	mock.recorder = &MockUpdateConnectorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateConnectorClient) EXPECT() *MockUpdateConnectorClientMockRecorder {
	return m.recorder
}

// UpdateConnectorStatus mocks base method.
func (m *MockUpdateConnectorClient) UpdateConnectorStatus(ctx context.Context, connectorKey, state string) (*meroxa.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnectorStatus", ctx, connectorKey, state)
	ret0, _ := ret[0].(*meroxa.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConnectorStatus indicates an expected call of UpdateConnectorStatus.
func (mr *MockUpdateConnectorClientMockRecorder) UpdateConnectorStatus(ctx, connectorKey, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnectorStatus", reflect.TypeOf((*MockUpdateConnectorClient)(nil).UpdateConnectorStatus), ctx, connectorKey, state)
}
