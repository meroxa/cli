// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/pipelines/list.go

// Package mock_pipelines is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockListPipelinesClient is a mock of listPipelinesClient interface.
type MockListPipelinesClient struct {
	ctrl     *gomock.Controller
	recorder *MockListPipelinesClientMockRecorder
}

// MockListPipelinesClientMockRecorder is the mock recorder for MockListPipelinesClient.
type MockListPipelinesClientMockRecorder struct {
	mock *MockListPipelinesClient
}

// NewMockListPipelinesClient creates a new mock instance.
func NewMockListPipelinesClient(ctrl *gomock.Controller) *MockListPipelinesClient {
	mock := &MockListPipelinesClient{ctrl: ctrl}
	mock.recorder = &MockListPipelinesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListPipelinesClient) EXPECT() *MockListPipelinesClientMockRecorder {
	return m.recorder
}

// ListPipelines mocks base method.
func (m *MockListPipelinesClient) ListPipelines(ctx context.Context) ([]*meroxa.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPipelines", ctx)
	ret0, _ := ret[0].([]*meroxa.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockListPipelinesClientMockRecorder) ListPipelines(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockListPipelinesClient)(nil).ListPipelines), ctx)
}
