// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/pipelines/create.go

// Package mock_pipelines is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockCreatePipelineClient is a mock of createPipelineClient interface.
type MockCreatePipelineClient struct {
	ctrl     *gomock.Controller
	recorder *MockCreatePipelineClientMockRecorder
}

// MockCreatePipelineClientMockRecorder is the mock recorder for MockCreatePipelineClient.
type MockCreatePipelineClientMockRecorder struct {
	mock *MockCreatePipelineClient
}

// NewMockCreatePipelineClient creates a new mock instance.
func NewMockCreatePipelineClient(ctrl *gomock.Controller) *MockCreatePipelineClient {
	mock := &MockCreatePipelineClient{ctrl: ctrl}
	mock.recorder = &MockCreatePipelineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreatePipelineClient) EXPECT() *MockCreatePipelineClientMockRecorder {
	return m.recorder
}

// CreatePipeline mocks base method.
func (m *MockCreatePipelineClient) CreatePipeline(ctx context.Context, pipeline *meroxa.Pipeline) (*meroxa.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePipeline", ctx, pipeline)
	ret0, _ := ret[0].(*meroxa.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePipeline indicates an expected call of CreatePipeline.
func (mr *MockCreatePipelineClientMockRecorder) CreatePipeline(ctx, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePipeline", reflect.TypeOf((*MockCreatePipelineClient)(nil).CreatePipeline), ctx, pipeline)
}
