// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/environments/describe.go

// Package mock_environments is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockDescribeEnvironmentClient is a mock of describeEnvironmentClient interface.
type MockDescribeEnvironmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeEnvironmentClientMockRecorder
}

// MockDescribeEnvironmentClientMockRecorder is the mock recorder for MockDescribeEnvironmentClient.
type MockDescribeEnvironmentClientMockRecorder struct {
	mock *MockDescribeEnvironmentClient
}

// NewMockDescribeEnvironmentClient creates a new mock instance.
func NewMockDescribeEnvironmentClient(ctrl *gomock.Controller) *MockDescribeEnvironmentClient {
	mock := &MockDescribeEnvironmentClient{ctrl: ctrl}
	mock.recorder = &MockDescribeEnvironmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeEnvironmentClient) EXPECT() *MockDescribeEnvironmentClientMockRecorder {
	return m.recorder
}

// GetEnvironment mocks base method.
func (m *MockDescribeEnvironmentClient) GetEnvironment(ctx context.Context, nameOrUUID string) (*meroxa.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", ctx, nameOrUUID)
	ret0, _ := ret[0].(*meroxa.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockDescribeEnvironmentClientMockRecorder) GetEnvironment(ctx, nameOrUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockDescribeEnvironmentClient)(nil).GetEnvironment), ctx, nameOrUUID)
}
