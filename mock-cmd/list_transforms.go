// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/transforms/list.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockListTransformsClient is a mock of listTransformsClient interface.
type MockListTransformsClient struct {
	ctrl     *gomock.Controller
	recorder *MockListTransformsClientMockRecorder
}

// MockListTransformsClientMockRecorder is the mock recorder for MockListTransformsClient.
type MockListTransformsClientMockRecorder struct {
	mock *MockListTransformsClient
}

// NewMockListTransformsClient creates a new mock instance.
func NewMockListTransformsClient(ctrl *gomock.Controller) *MockListTransformsClient {
	mock := &MockListTransformsClient{ctrl: ctrl}
	mock.recorder = &MockListTransformsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTransformsClient) EXPECT() *MockListTransformsClientMockRecorder {
	return m.recorder
}

// ListTransforms mocks base method.
func (m *MockListTransformsClient) ListTransforms(ctx context.Context) ([]*meroxa.Transform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransforms", ctx)
	ret0, _ := ret[0].([]*meroxa.Transform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransforms indicates an expected call of ListTransforms.
func (mr *MockListTransformsClientMockRecorder) ListTransforms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransforms", reflect.TypeOf((*MockListTransformsClient)(nil).ListTransforms), ctx)
}
