// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/update_pipeline.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockUpdatePipelineClient is a mock of UpdatePipelineClient interface.
type MockUpdatePipelineClient struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatePipelineClientMockRecorder
}

// MockUpdatePipelineClientMockRecorder is the mock recorder for MockUpdatePipelineClient.
type MockUpdatePipelineClientMockRecorder struct {
	mock *MockUpdatePipelineClient
}

// NewMockUpdatePipelineClient creates a new mock instance.
func NewMockUpdatePipelineClient(ctrl *gomock.Controller) *MockUpdatePipelineClient {
	mock := &MockUpdatePipelineClient{ctrl: ctrl}
	mock.recorder = &MockUpdatePipelineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdatePipelineClient) EXPECT() *MockUpdatePipelineClientMockRecorder {
	return m.recorder
}

// GetPipelineByName mocks base method.
func (m *MockUpdatePipelineClient) GetPipelineByName(ctx context.Context, name string) (*meroxa.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineByName", ctx, name)
	ret0, _ := ret[0].(*meroxa.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineByName indicates an expected call of GetPipelineByName.
func (mr *MockUpdatePipelineClientMockRecorder) GetPipelineByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineByName", reflect.TypeOf((*MockUpdatePipelineClient)(nil).GetPipelineByName), ctx, name)
}

// UpdatePipeline mocks base method.
func (m *MockUpdatePipelineClient) UpdatePipeline(ctx context.Context, pipelineID int, pipeline meroxa.UpdatePipelineInput) (*meroxa.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipeline", ctx, pipelineID, pipeline)
	ret0, _ := ret[0].(*meroxa.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipeline indicates an expected call of UpdatePipeline.
func (mr *MockUpdatePipelineClientMockRecorder) UpdatePipeline(ctx, pipelineID, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipeline", reflect.TypeOf((*MockUpdatePipelineClient)(nil).UpdatePipeline), ctx, pipelineID, pipeline)
}

// UpdatePipelineStatus mocks base method.
func (m *MockUpdatePipelineClient) UpdatePipelineStatus(ctx context.Context, pipelineID int, state string) (*meroxa.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePipelineStatus", ctx, pipelineID, state)
	ret0, _ := ret[0].(*meroxa.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePipelineStatus indicates an expected call of UpdatePipelineStatus.
func (mr *MockUpdatePipelineClientMockRecorder) UpdatePipelineStatus(ctx, pipelineID, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePipelineStatus", reflect.TypeOf((*MockUpdatePipelineClient)(nil).UpdatePipelineStatus), ctx, pipelineID, state)
}
