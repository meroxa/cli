// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/root/connectors/describe_connector.go

// Package mock_connectors is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockDescribeConnectorClient is a mock of describeConnectorClient interface.
type MockDescribeConnectorClient struct {
	ctrl     *gomock.Controller
	recorder *MockDescribeConnectorClientMockRecorder
}

// MockDescribeConnectorClientMockRecorder is the mock recorder for MockDescribeConnectorClient.
type MockDescribeConnectorClientMockRecorder struct {
	mock *MockDescribeConnectorClient
}

// NewMockDescribeConnectorClient creates a new mock instance.
func NewMockDescribeConnectorClient(ctrl *gomock.Controller) *MockDescribeConnectorClient {
	mock := &MockDescribeConnectorClient{ctrl: ctrl}
	mock.recorder = &MockDescribeConnectorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDescribeConnectorClient) EXPECT() *MockDescribeConnectorClientMockRecorder {
	return m.recorder
}

// GetConnectorByName mocks base method.
func (m *MockDescribeConnectorClient) GetConnectorByName(ctx context.Context, name string) (*meroxa.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectorByName", ctx, name)
	ret0, _ := ret[0].(*meroxa.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectorByName indicates an expected call of GetConnectorByName.
func (mr *MockDescribeConnectorClientMockRecorder) GetConnectorByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectorByName", reflect.TypeOf((*MockDescribeConnectorClient)(nil).GetConnectorByName), ctx, name)
}
