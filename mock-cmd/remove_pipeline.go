// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/remove_pipeline.go

// Package mock_cmd is a generated GoMock package.
package mock_cmd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	meroxa "github.com/meroxa/meroxa-go"
)

// MockRemovePipelineClient is a mock of RemovePipelineClient interface.
type MockRemovePipelineClient struct {
	ctrl     *gomock.Controller
	recorder *MockRemovePipelineClientMockRecorder
}

// MockRemovePipelineClientMockRecorder is the mock recorder for MockRemovePipelineClient.
type MockRemovePipelineClientMockRecorder struct {
	mock *MockRemovePipelineClient
}

// NewMockRemovePipelineClient creates a new mock instance.
func NewMockRemovePipelineClient(ctrl *gomock.Controller) *MockRemovePipelineClient {
	mock := &MockRemovePipelineClient{ctrl: ctrl}
	mock.recorder = &MockRemovePipelineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovePipelineClient) EXPECT() *MockRemovePipelineClientMockRecorder {
	return m.recorder
}

// DeletePipeline mocks base method.
func (m *MockRemovePipelineClient) DeletePipeline(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePipeline", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePipeline indicates an expected call of DeletePipeline.
func (mr *MockRemovePipelineClientMockRecorder) DeletePipeline(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePipeline", reflect.TypeOf((*MockRemovePipelineClient)(nil).DeletePipeline), ctx, id)
}

// GetPipelineByName mocks base method.
func (m *MockRemovePipelineClient) GetPipelineByName(ctx context.Context, name string) (*meroxa.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPipelineByName", ctx, name)
	ret0, _ := ret[0].(*meroxa.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipelineByName indicates an expected call of GetPipelineByName.
func (mr *MockRemovePipelineClientMockRecorder) GetPipelineByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipelineByName", reflect.TypeOf((*MockRemovePipelineClient)(nil).GetPipelineByName), ctx, name)
}
