// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/turbine/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	turbine "github.com/meroxa/cli/cmd/meroxa/turbine"
)

// MockCLI is a mock of CLI interface.
type MockCLI struct {
	ctrl     *gomock.Controller
	recorder *MockCLIMockRecorder
}

// MockCLIMockRecorder is the mock recorder for MockCLI.
type MockCLIMockRecorder struct {
	mock *MockCLI
}

// NewMockCLI creates a new mock instance.
func NewMockCLI(ctrl *gomock.Controller) *MockCLI {
	mock := &MockCLI{ctrl: ctrl}
	mock.recorder = &MockCLIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCLI) EXPECT() *MockCLIMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockCLI) Build(ctx context.Context, appName string, platform bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", ctx, appName, platform)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockCLIMockRecorder) Build(ctx, appName, platform interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockCLI)(nil).Build), ctx, appName, platform)
}

// CleanUpBinaries mocks base method.
func (m *MockCLI) CleanUpBinaries(ctx context.Context, appName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUpBinaries", ctx, appName)
}

// CleanUpBinaries indicates an expected call of CleanUpBinaries.
func (mr *MockCLIMockRecorder) CleanUpBinaries(ctx, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpBinaries", reflect.TypeOf((*MockCLI)(nil).CleanUpBinaries), ctx, appName)
}

// CleanUpBuild mocks base method.
func (m *MockCLI) CleanUpBuild(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUpBuild", ctx)
}

// CleanUpBuild indicates an expected call of CleanUpBuild.
func (mr *MockCLIMockRecorder) CleanUpBuild(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpBuild", reflect.TypeOf((*MockCLI)(nil).CleanUpBuild), ctx)
}

// CreateDockerfile mocks base method.
func (m *MockCLI) CreateDockerfile(ctx context.Context, appName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDockerfile", ctx, appName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDockerfile indicates an expected call of CreateDockerfile.
func (mr *MockCLIMockRecorder) CreateDockerfile(ctx, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDockerfile", reflect.TypeOf((*MockCLI)(nil).CreateDockerfile), ctx, appName)
}

// Deploy mocks base method.
func (m *MockCLI) Deploy(ctx context.Context, imageName, appName, gitSha, specVersion, accountUUID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", ctx, imageName, appName, gitSha, specVersion, accountUUID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy.
func (mr *MockCLIMockRecorder) Deploy(ctx, imageName, appName, gitSha, specVersion, accountUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockCLI)(nil).Deploy), ctx, imageName, appName, gitSha, specVersion, accountUUID)
}

// GetGitSha mocks base method.
func (m *MockCLI) GetGitSha(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGitSha", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGitSha indicates an expected call of GetGitSha.
func (mr *MockCLIMockRecorder) GetGitSha(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGitSha", reflect.TypeOf((*MockCLI)(nil).GetGitSha), ctx)
}

// GetResources mocks base method.
func (m *MockCLI) GetResources(ctx context.Context, appName string) ([]turbine.ApplicationResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, appName)
	ret0, _ := ret[0].([]turbine.ApplicationResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockCLIMockRecorder) GetResources(ctx, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockCLI)(nil).GetResources), ctx, appName)
}

// GetVersion mocks base method.
func (m *MockCLI) GetVersion(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockCLIMockRecorder) GetVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockCLI)(nil).GetVersion), ctx)
}

// GitChecks mocks base method.
func (m *MockCLI) GitChecks(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitChecks", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitChecks indicates an expected call of GitChecks.
func (mr *MockCLIMockRecorder) GitChecks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitChecks", reflect.TypeOf((*MockCLI)(nil).GitChecks), ctx)
}

// GitInit mocks base method.
func (m *MockCLI) GitInit(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitInit", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitInit indicates an expected call of GitInit.
func (mr *MockCLIMockRecorder) GitInit(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitInit", reflect.TypeOf((*MockCLI)(nil).GitInit), ctx, name)
}

// Init mocks base method.
func (m *MockCLI) Init(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCLIMockRecorder) Init(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCLI)(nil).Init), ctx, name)
}

// NeedsToBuild mocks base method.
func (m *MockCLI) NeedsToBuild(ctx context.Context, appName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsToBuild", ctx, appName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeedsToBuild indicates an expected call of NeedsToBuild.
func (mr *MockCLIMockRecorder) NeedsToBuild(ctx, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsToBuild", reflect.TypeOf((*MockCLI)(nil).NeedsToBuild), ctx, appName)
}

// Run mocks base method.
func (m *MockCLI) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCLIMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCLI)(nil).Run), ctx)
}

// SetupForDeploy mocks base method.
func (m *MockCLI) SetupForDeploy(ctx context.Context) (func(), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupForDeploy", ctx)
	ret0, _ := ret[0].(func())
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupForDeploy indicates an expected call of SetupForDeploy.
func (mr *MockCLIMockRecorder) SetupForDeploy(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupForDeploy", reflect.TypeOf((*MockCLI)(nil).SetupForDeploy), ctx)
}

// Upgrade mocks base method.
func (m *MockCLI) Upgrade(vendor bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", vendor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockCLIMockRecorder) Upgrade(vendor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockCLI)(nil).Upgrade), vendor)
}
