// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/meroxa/turbine/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCLI is a mock of CLI interface.
type MockCLI struct {
	ctrl     *gomock.Controller
	recorder *MockCLIMockRecorder
}

// MockCLIMockRecorder is the mock recorder for MockCLI.
type MockCLIMockRecorder struct {
	mock *MockCLI
}

// NewMockCLI creates a new mock instance.
func NewMockCLI(ctrl *gomock.Controller) *MockCLI {
	mock := &MockCLI{ctrl: ctrl}
	mock.recorder = &MockCLIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCLI) EXPECT() *MockCLIMockRecorder {
	return m.recorder
}

// GitInit mocks base method.
func (m *MockCLI) GitInit(ctx context.Context, appPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitInit", ctx, appPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// GitInit indicates an expected call of GitInit.
func (mr *MockCLIMockRecorder) GitInit(ctx, appPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitInit", reflect.TypeOf((*MockCLI)(nil).GitInit), ctx, appPath)
}

// Init mocks base method.
func (m *MockCLI) Init(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCLIMockRecorder) Init(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCLI)(nil).Init), ctx, name)
}

// Run mocks base method.
func (m *MockCLI) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCLIMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCLI)(nil).Run), ctx)
}

// Upgrade mocks base method.
func (m *MockCLI) Upgrade(vendor bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", vendor)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockCLIMockRecorder) Upgrade(vendor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockCLI)(nil).Upgrade), vendor)
}
