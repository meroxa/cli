// Code generated by mockery v2.35.2. DO NOT EDIT.

package global

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	url "net/url"
)

// mockBasicClient is an autogenerated mock type for the BasicClient type
type mockBasicClient struct {
	mock.Mock
}

type mockBasicClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockBasicClient) EXPECT() *mockBasicClient_Expecter {
	return &mockBasicClient_Expecter{mock: &_m.Mock}
}

// CollectionRequest provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *mockBasicClient) CollectionRequest(_a0 context.Context, _a1 string, _a2 string, _a3 interface{}, _a4 url.Values, _a5 http.Header, _a6 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBasicClient_CollectionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CollectionRequest'
type mockBasicClient_CollectionRequest_Call struct {
	*mock.Call
}

// CollectionRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 interface{}
//   - _a4 url.Values
//   - _a5 http.Header
//   - _a6 interface{}
func (_e *mockBasicClient_Expecter) CollectionRequest(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}) *mockBasicClient_CollectionRequest_Call {
	return &mockBasicClient_CollectionRequest_Call{Call: _e.mock.On("CollectionRequest", _a0, _a1, _a2, _a3, _a4, _a5, _a6)}
}

func (_c *mockBasicClient_CollectionRequest_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 interface{}, _a4 url.Values, _a5 http.Header, _a6 interface{})) *mockBasicClient_CollectionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(url.Values), args[5].(http.Header), args[6].(interface{}))
	})
	return _c
}

func (_c *mockBasicClient_CollectionRequest_Call) Return(_a0 *http.Response, _a1 error) *mockBasicClient_CollectionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBasicClient_CollectionRequest_Call) RunAndReturn(run func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) (*http.Response, error)) *mockBasicClient_CollectionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// URLRequest provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6
func (_m *mockBasicClient) URLRequest(_a0 context.Context, _a1 string, _a2 string, _a3 interface{}, _a4 url.Values, _a5 http.Header, _a6 interface{}) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6)

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockBasicClient_URLRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URLRequest'
type mockBasicClient_URLRequest_Call struct {
	*mock.Call
}

// URLRequest is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 interface{}
//   - _a4 url.Values
//   - _a5 http.Header
//   - _a6 interface{}
func (_e *mockBasicClient_Expecter) URLRequest(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}, _a5 interface{}, _a6 interface{}) *mockBasicClient_URLRequest_Call {
	return &mockBasicClient_URLRequest_Call{Call: _e.mock.On("URLRequest", _a0, _a1, _a2, _a3, _a4, _a5, _a6)}
}

func (_c *mockBasicClient_URLRequest_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 interface{}, _a4 url.Values, _a5 http.Header, _a6 interface{})) *mockBasicClient_URLRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(interface{}), args[4].(url.Values), args[5].(http.Header), args[6].(interface{}))
	})
	return _c
}

func (_c *mockBasicClient_URLRequest_Call) Return(_a0 *http.Response, _a1 error) *mockBasicClient_URLRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockBasicClient_URLRequest_Call) RunAndReturn(run func(context.Context, string, string, interface{}, url.Values, http.Header, interface{}) (*http.Response, error)) *mockBasicClient_URLRequest_Call {
	_c.Call.Return(run)
	return _c
}

// newMockBasicClient creates a new instance of mockBasicClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockBasicClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockBasicClient {
	mock := &mockBasicClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
