// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	turbinev2 "github.com/meroxa/turbine-core/v2/proto/turbine/v2"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddDestination mocks base method.
func (m *MockClient) AddDestination(ctx context.Context, in *turbinev2.AddDestinationRequest, opts ...grpc.CallOption) (*turbinev2.AddDestinationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDestination", varargs...)
	ret0, _ := ret[0].(*turbinev2.AddDestinationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDestination indicates an expected call of AddDestination.
func (mr *MockClientMockRecorder) AddDestination(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDestination", reflect.TypeOf((*MockClient)(nil).AddDestination), varargs...)
}

// AddSource mocks base method.
func (m *MockClient) AddSource(ctx context.Context, in *turbinev2.AddSourceRequest, opts ...grpc.CallOption) (*turbinev2.AddSourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSource", varargs...)
	ret0, _ := ret[0].(*turbinev2.AddSourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSource indicates an expected call of AddSource.
func (mr *MockClientMockRecorder) AddSource(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSource", reflect.TypeOf((*MockClient)(nil).AddSource), varargs...)
}

// Close mocks base method.
func (m *MockClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GetSpec mocks base method.
func (m *MockClient) GetSpec(ctx context.Context, in *turbinev2.GetSpecRequest, opts ...grpc.CallOption) (*turbinev2.GetSpecResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSpec", varargs...)
	ret0, _ := ret[0].(*turbinev2.GetSpecResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpec indicates an expected call of GetSpec.
func (mr *MockClientMockRecorder) GetSpec(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpec", reflect.TypeOf((*MockClient)(nil).GetSpec), varargs...)
}

// Init mocks base method.
func (m *MockClient) Init(ctx context.Context, in *turbinev2.InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockClientMockRecorder) Init(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockClient)(nil).Init), varargs...)
}

// ProcessRecords mocks base method.
func (m *MockClient) ProcessRecords(ctx context.Context, in *turbinev2.ProcessRecordsRequest, opts ...grpc.CallOption) (*turbinev2.ProcessRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProcessRecords", varargs...)
	ret0, _ := ret[0].(*turbinev2.ProcessRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessRecords indicates an expected call of ProcessRecords.
func (mr *MockClientMockRecorder) ProcessRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRecords", reflect.TypeOf((*MockClient)(nil).ProcessRecords), varargs...)
}

// ReadRecords mocks base method.
func (m *MockClient) ReadRecords(ctx context.Context, in *turbinev2.ReadRecordsRequest, opts ...grpc.CallOption) (*turbinev2.ReadRecordsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadRecords", varargs...)
	ret0, _ := ret[0].(*turbinev2.ReadRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecords indicates an expected call of ReadRecords.
func (mr *MockClientMockRecorder) ReadRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecords", reflect.TypeOf((*MockClient)(nil).ReadRecords), varargs...)
}

// WriteRecords mocks base method.
func (m *MockClient) WriteRecords(ctx context.Context, in *turbinev2.WriteRecordsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteRecords", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteRecords indicates an expected call of WriteRecords.
func (mr *MockClientMockRecorder) WriteRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRecords", reflect.TypeOf((*MockClient)(nil).WriteRecords), varargs...)
}
