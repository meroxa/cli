// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: turbine/v2/turbine_v2.proto

package turbinev2

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitRequestMultiError, or
// nil if none found.
func (m *InitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppName()) < 1 {
		err := InitRequestValidationError{
			field:  "AppName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetConfigFilePath()) < 1 {
		err := InitRequestValidationError{
			field:  "ConfigFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Language_name[int32(m.GetLanguage())]; !ok {
		err := InitRequestValidationError{
			field:  "Language",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitSHA

	// no validation rules for TurbineVersion

	if len(errors) > 0 {
		return InitRequestMultiError(errors)
	}

	return nil
}

// InitRequestMultiError is an error wrapping multiple validation errors
// returned by InitRequest.ValidateAll() if the designated constraints aren't met.
type InitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitRequestMultiError) AllErrors() []error { return m }

// InitRequestValidationError is the validation error returned by
// InitRequest.Validate if the designated constraints aren't met.
type InitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitRequestValidationError) ErrorName() string { return "InitRequestValidationError" }

// Error satisfies the builtin error interface
func (e InitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitRequestValidationError{}

// Validate checks the field values on AddSourceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSourceRequestMultiError, or nil if none found.
func (m *AddSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddSourceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPlugin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddSourceRequestValidationError{
					field:  "Plugin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddSourceRequestValidationError{
					field:  "Plugin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlugin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSourceRequestValidationError{
				field:  "Plugin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddSourceRequestMultiError(errors)
	}

	return nil
}

// AddSourceRequestMultiError is an error wrapping multiple validation errors
// returned by AddSourceRequest.ValidateAll() if the designated constraints
// aren't met.
type AddSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSourceRequestMultiError) AllErrors() []error { return m }

// AddSourceRequestValidationError is the validation error returned by
// AddSourceRequest.Validate if the designated constraints aren't met.
type AddSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSourceRequestValidationError) ErrorName() string { return "AddSourceRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSourceRequestValidationError{}

// Validate checks the field values on AddSourceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddSourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddSourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddSourceResponseMultiError, or nil if none found.
func (m *AddSourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddSourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AddSourceResponseValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStreamName()) < 1 {
		err := AddSourceResponseValidationError{
			field:  "StreamName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddSourceResponseMultiError(errors)
	}

	return nil
}

// AddSourceResponseMultiError is an error wrapping multiple validation errors
// returned by AddSourceResponse.ValidateAll() if the designated constraints
// aren't met.
type AddSourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddSourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddSourceResponseMultiError) AllErrors() []error { return m }

// AddSourceResponseValidationError is the validation error returned by
// AddSourceResponse.Validate if the designated constraints aren't met.
type AddSourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSourceResponseValidationError) ErrorName() string {
	return "AddSourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSourceResponseValidationError{}

// Validate checks the field values on ReadRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadRecordsRequestMultiError, or nil if none found.
func (m *ReadRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSourceStream()) < 1 {
		err := ReadRecordsRequestValidationError{
			field:  "SourceStream",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadRecordsRequestMultiError(errors)
	}

	return nil
}

// ReadRecordsRequestMultiError is an error wrapping multiple validation errors
// returned by ReadRecordsRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadRecordsRequestMultiError) AllErrors() []error { return m }

// ReadRecordsRequestValidationError is the validation error returned by
// ReadRecordsRequest.Validate if the designated constraints aren't met.
type ReadRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRecordsRequestValidationError) ErrorName() string {
	return "ReadRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRecordsRequestValidationError{}

// Validate checks the field values on ReadRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadRecordsResponseMultiError, or nil if none found.
func (m *ReadRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStreamRecords() == nil {
		err := ReadRecordsResponseValidationError{
			field:  "StreamRecords",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStreamRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadRecordsResponseValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadRecordsResponseValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreamRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadRecordsResponseValidationError{
				field:  "StreamRecords",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadRecordsResponseMultiError(errors)
	}

	return nil
}

// ReadRecordsResponseMultiError is an error wrapping multiple validation
// errors returned by ReadRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadRecordsResponseMultiError) AllErrors() []error { return m }

// ReadRecordsResponseValidationError is the validation error returned by
// ReadRecordsResponse.Validate if the designated constraints aren't met.
type ReadRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRecordsResponseValidationError) ErrorName() string {
	return "ReadRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRecordsResponseValidationError{}

// Validate checks the field values on ProcessRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessRecordsRequestMultiError, or nil if none found.
func (m *ProcessRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProcess() == nil {
		err := ProcessRecordsRequestValidationError{
			field:  "Process",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessRecordsRequestValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetStreamRecords() == nil {
		err := ProcessRecordsRequestValidationError{
			field:  "StreamRecords",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStreamRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreamRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessRecordsRequestValidationError{
				field:  "StreamRecords",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessRecordsRequestMultiError(errors)
	}

	return nil
}

// ProcessRecordsRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessRecordsRequestMultiError) AllErrors() []error { return m }

// ProcessRecordsRequestValidationError is the validation error returned by
// ProcessRecordsRequest.Validate if the designated constraints aren't met.
type ProcessRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessRecordsRequestValidationError) ErrorName() string {
	return "ProcessRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessRecordsRequestValidationError{}

// Validate checks the field values on ProcessRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessRecordsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessRecordsResponseMultiError, or nil if none found.
func (m *ProcessRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStreamRecords() == nil {
		err := ProcessRecordsResponseValidationError{
			field:  "StreamRecords",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStreamRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessRecordsResponseValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessRecordsResponseValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreamRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessRecordsResponseValidationError{
				field:  "StreamRecords",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessRecordsResponseMultiError(errors)
	}

	return nil
}

// ProcessRecordsResponseMultiError is an error wrapping multiple validation
// errors returned by ProcessRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ProcessRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessRecordsResponseMultiError) AllErrors() []error { return m }

// ProcessRecordsResponseValidationError is the validation error returned by
// ProcessRecordsResponse.Validate if the designated constraints aren't met.
type ProcessRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessRecordsResponseValidationError) ErrorName() string {
	return "ProcessRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessRecordsResponseValidationError{}

// Validate checks the field values on AddDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDestinationRequestMultiError, or nil if none found.
func (m *AddDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddDestinationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPlugin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDestinationRequestValidationError{
					field:  "Plugin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDestinationRequestValidationError{
					field:  "Plugin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlugin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDestinationRequestValidationError{
				field:  "Plugin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDestinationRequestMultiError(errors)
	}

	return nil
}

// AddDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by AddDestinationRequest.ValidateAll() if the designated
// constraints aren't met.
type AddDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDestinationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDestinationRequestMultiError) AllErrors() []error { return m }

// AddDestinationRequestValidationError is the validation error returned by
// AddDestinationRequest.Validate if the designated constraints aren't met.
type AddDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDestinationRequestValidationError) ErrorName() string {
	return "AddDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDestinationRequestValidationError{}

// Validate checks the field values on AddDestinationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDestinationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDestinationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDestinationResponseMultiError, or nil if none found.
func (m *AddDestinationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDestinationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := AddDestinationResponseValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddDestinationResponseMultiError(errors)
	}

	return nil
}

// AddDestinationResponseMultiError is an error wrapping multiple validation
// errors returned by AddDestinationResponse.ValidateAll() if the designated
// constraints aren't met.
type AddDestinationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDestinationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDestinationResponseMultiError) AllErrors() []error { return m }

// AddDestinationResponseValidationError is the validation error returned by
// AddDestinationResponse.Validate if the designated constraints aren't met.
type AddDestinationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDestinationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDestinationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDestinationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDestinationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDestinationResponseValidationError) ErrorName() string {
	return "AddDestinationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDestinationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDestinationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDestinationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDestinationResponseValidationError{}

// Validate checks the field values on WriteRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteRecordsRequestMultiError, or nil if none found.
func (m *WriteRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDestinationID()) < 1 {
		err := WriteRecordsRequestValidationError{
			field:  "DestinationID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStreamRecords() == nil {
		err := WriteRecordsRequestValidationError{
			field:  "StreamRecords",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStreamRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WriteRecordsRequestValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WriteRecordsRequestValidationError{
					field:  "StreamRecords",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStreamRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WriteRecordsRequestValidationError{
				field:  "StreamRecords",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WriteRecordsRequestMultiError(errors)
	}

	return nil
}

// WriteRecordsRequestMultiError is an error wrapping multiple validation
// errors returned by WriteRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type WriteRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteRecordsRequestMultiError) AllErrors() []error { return m }

// WriteRecordsRequestValidationError is the validation error returned by
// WriteRecordsRequest.Validate if the designated constraints aren't met.
type WriteRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteRecordsRequestValidationError) ErrorName() string {
	return "WriteRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteRecordsRequestValidationError{}

// Validate checks the field values on GetSpecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSpecRequestMultiError,
// or nil if none found.
func (m *GetSpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if len(errors) > 0 {
		return GetSpecRequestMultiError(errors)
	}

	return nil
}

// GetSpecRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpecRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecRequestMultiError) AllErrors() []error { return m }

// GetSpecRequestValidationError is the validation error returned by
// GetSpecRequest.Validate if the designated constraints aren't met.
type GetSpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecRequestValidationError) ErrorName() string { return "GetSpecRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecRequestValidationError{}

// Validate checks the field values on GetSpecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecResponseMultiError, or nil if none found.
func (m *GetSpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Spec

	if len(errors) > 0 {
		return GetSpecResponseMultiError(errors)
	}

	return nil
}

// GetSpecResponseMultiError is an error wrapping multiple validation errors
// returned by GetSpecResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecResponseMultiError) AllErrors() []error { return m }

// GetSpecResponseValidationError is the validation error returned by
// GetSpecResponse.Validate if the designated constraints aren't met.
type GetSpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecResponseValidationError) ErrorName() string { return "GetSpecResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecResponseValidationError{}

// Validate checks the field values on StreamRecords with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamRecords) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRecords with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamRecordsMultiError, or
// nil if none found.
func (m *StreamRecords) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRecords) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetStreamName()) < 1 {
		err := StreamRecordsValidationError{
			field:  "StreamName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamRecordsValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamRecordsValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamRecordsValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamRecordsMultiError(errors)
	}

	return nil
}

// StreamRecordsMultiError is an error wrapping multiple validation errors
// returned by StreamRecords.ValidateAll() if the designated constraints
// aren't met.
type StreamRecordsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRecordsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRecordsMultiError) AllErrors() []error { return m }

// StreamRecordsValidationError is the validation error returned by
// StreamRecords.Validate if the designated constraints aren't met.
type StreamRecordsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRecordsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRecordsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRecordsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRecordsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRecordsValidationError) ErrorName() string { return "StreamRecordsValidationError" }

// Error satisfies the builtin error interface
func (e StreamRecordsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRecords.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRecordsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRecordsValidationError{}

// Validate checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Plugin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Plugin with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PluginMultiError, or nil if none found.
func (m *Plugin) ValidateAll() error {
	return m.validate(true)
}

func (m *Plugin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PluginValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Config

	if len(errors) > 0 {
		return PluginMultiError(errors)
	}

	return nil
}

// PluginMultiError is an error wrapping multiple validation errors returned by
// Plugin.ValidateAll() if the designated constraints aren't met.
type PluginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginMultiError) AllErrors() []error { return m }

// PluginValidationError is the validation error returned by Plugin.Validate if
// the designated constraints aren't met.
type PluginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginValidationError) ErrorName() string { return "PluginValidationError" }

// Error satisfies the builtin error interface
func (e PluginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginValidationError{}

// Validate checks the field values on ProcessRecordsRequest_Process with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessRecordsRequest_Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessRecordsRequest_Process with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProcessRecordsRequest_ProcessMultiError, or nil if none found.
func (m *ProcessRecordsRequest_Process) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessRecordsRequest_Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ProcessRecordsRequest_ProcessValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProcessRecordsRequest_ProcessMultiError(errors)
	}

	return nil
}

// ProcessRecordsRequest_ProcessMultiError is an error wrapping multiple
// validation errors returned by ProcessRecordsRequest_Process.ValidateAll()
// if the designated constraints aren't met.
type ProcessRecordsRequest_ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessRecordsRequest_ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessRecordsRequest_ProcessMultiError) AllErrors() []error { return m }

// ProcessRecordsRequest_ProcessValidationError is the validation error
// returned by ProcessRecordsRequest_Process.Validate if the designated
// constraints aren't met.
type ProcessRecordsRequest_ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessRecordsRequest_ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessRecordsRequest_ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessRecordsRequest_ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessRecordsRequest_ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessRecordsRequest_ProcessValidationError) ErrorName() string {
	return "ProcessRecordsRequest_ProcessValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessRecordsRequest_ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessRecordsRequest_Process.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessRecordsRequest_ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessRecordsRequest_ProcessValidationError{}
