// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: turbine/v1/turbine.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TurbineServiceClient is the client API for TurbineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TurbineServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// todo consider one method parameterized with connector type
	ReadFromSource(ctx context.Context, in *ReadFromSourceRequest, opts ...grpc.CallOption) (*RecordsCollection, error)
	Process(ctx context.Context, in *ProcessRecordsRequest, opts ...grpc.CallOption) (*RecordsCollection, error)
	WriteToDestination(ctx context.Context, in *WriteToDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// needed in CLI to know if a build is needed or not
	HasFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// needed in the CLI for the deployment spec
	GetSpec(ctx context.Context, in *GetSpecRequest, opts ...grpc.CallOption) (*GetSpecResponse, error)
}

type turbineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTurbineServiceClient(cc grpc.ClientConnInterface) TurbineServiceClient {
	return &turbineServiceClient{cc}
}

func (c *turbineServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/turbine_core.TurbineService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) ReadFromSource(ctx context.Context, in *ReadFromSourceRequest, opts ...grpc.CallOption) (*RecordsCollection, error) {
	out := new(RecordsCollection)
	err := c.cc.Invoke(ctx, "/turbine_core.TurbineService/ReadFromSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) Process(ctx context.Context, in *ProcessRecordsRequest, opts ...grpc.CallOption) (*RecordsCollection, error) {
	out := new(RecordsCollection)
	err := c.cc.Invoke(ctx, "/turbine_core.TurbineService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) WriteToDestination(ctx context.Context, in *WriteToDestinationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/turbine_core.TurbineService/WriteToDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) HasFunctions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/turbine_core.TurbineService/HasFunctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turbineServiceClient) GetSpec(ctx context.Context, in *GetSpecRequest, opts ...grpc.CallOption) (*GetSpecResponse, error) {
	out := new(GetSpecResponse)
	err := c.cc.Invoke(ctx, "/turbine_core.TurbineService/GetSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TurbineServiceServer is the server API for TurbineService service.
// All implementations should embed UnimplementedTurbineServiceServer
// for forward compatibility
type TurbineServiceServer interface {
	Init(context.Context, *InitRequest) (*emptypb.Empty, error)
	// todo consider one method parameterized with connector type
	ReadFromSource(context.Context, *ReadFromSourceRequest) (*RecordsCollection, error)
	Process(context.Context, *ProcessRecordsRequest) (*RecordsCollection, error)
	WriteToDestination(context.Context, *WriteToDestinationRequest) (*emptypb.Empty, error)
	// needed in CLI to know if a build is needed or not
	HasFunctions(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	// needed in the CLI for the deployment spec
	GetSpec(context.Context, *GetSpecRequest) (*GetSpecResponse, error)
}

// UnimplementedTurbineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTurbineServiceServer struct {
}

func (UnimplementedTurbineServiceServer) Init(context.Context, *InitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedTurbineServiceServer) ReadFromSource(context.Context, *ReadFromSourceRequest) (*RecordsCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFromSource not implemented")
}
func (UnimplementedTurbineServiceServer) Process(context.Context, *ProcessRecordsRequest) (*RecordsCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedTurbineServiceServer) WriteToDestination(context.Context, *WriteToDestinationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteToDestination not implemented")
}
func (UnimplementedTurbineServiceServer) HasFunctions(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFunctions not implemented")
}
func (UnimplementedTurbineServiceServer) GetSpec(context.Context, *GetSpecRequest) (*GetSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpec not implemented")
}

// UnsafeTurbineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TurbineServiceServer will
// result in compilation errors.
type UnsafeTurbineServiceServer interface {
	mustEmbedUnimplementedTurbineServiceServer()
}

func RegisterTurbineServiceServer(s grpc.ServiceRegistrar, srv TurbineServiceServer) {
	s.RegisterService(&TurbineService_ServiceDesc, srv)
}

func _TurbineService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turbine_core.TurbineService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_ReadFromSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFromSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).ReadFromSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turbine_core.TurbineService/ReadFromSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).ReadFromSource(ctx, req.(*ReadFromSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turbine_core.TurbineService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).Process(ctx, req.(*ProcessRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_WriteToDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteToDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).WriteToDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turbine_core.TurbineService/WriteToDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).WriteToDestination(ctx, req.(*WriteToDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_HasFunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).HasFunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turbine_core.TurbineService/HasFunctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).HasFunctions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TurbineService_GetSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TurbineServiceServer).GetSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/turbine_core.TurbineService/GetSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TurbineServiceServer).GetSpec(ctx, req.(*GetSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TurbineService_ServiceDesc is the grpc.ServiceDesc for TurbineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TurbineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "turbine_core.TurbineService",
	HandlerType: (*TurbineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _TurbineService_Init_Handler,
		},
		{
			MethodName: "ReadFromSource",
			Handler:    _TurbineService_ReadFromSource_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _TurbineService_Process_Handler,
		},
		{
			MethodName: "WriteToDestination",
			Handler:    _TurbineService_WriteToDestination_Handler,
		},
		{
			MethodName: "HasFunctions",
			Handler:    _TurbineService_HasFunctions_Handler,
		},
		{
			MethodName: "GetSpec",
			Handler:    _TurbineService_GetSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "turbine/v1/turbine.proto",
}
