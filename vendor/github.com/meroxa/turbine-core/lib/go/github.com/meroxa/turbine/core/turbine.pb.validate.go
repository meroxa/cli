// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: turbine/v1/turbine.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReadFromSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadFromSourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadFromSourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadFromSourceRequestMultiError, or nil if none found.
func (m *ReadFromSourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadFromSourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PluginName

	// no validation rules for Direction

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadFromSourceRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadFromSourceRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadFromSourceRequestValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadFromSourceRequestMultiError(errors)
	}

	return nil
}

// ReadFromSourceRequestMultiError is an error wrapping multiple validation
// errors returned by ReadFromSourceRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadFromSourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadFromSourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadFromSourceRequestMultiError) AllErrors() []error { return m }

// ReadFromSourceRequestValidationError is the validation error returned by
// ReadFromSourceRequest.Validate if the designated constraints aren't met.
type ReadFromSourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadFromSourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadFromSourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadFromSourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadFromSourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadFromSourceRequestValidationError) ErrorName() string {
	return "ReadFromSourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadFromSourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadFromSourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadFromSourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadFromSourceRequestValidationError{}

// Validate checks the field values on WriteToDestinationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WriteToDestinationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WriteToDestinationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WriteToDestinationRequestMultiError, or nil if none found.
func (m *WriteToDestinationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WriteToDestinationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PluginName

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WriteToDestinationRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WriteToDestinationRequestValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WriteToDestinationRequestValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WriteToDestinationRequestValidationError{
					field:  "Records",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WriteToDestinationRequestValidationError{
					field:  "Records",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WriteToDestinationRequestValidationError{
				field:  "Records",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WriteToDestinationRequestMultiError(errors)
	}

	return nil
}

// WriteToDestinationRequestMultiError is an error wrapping multiple validation
// errors returned by WriteToDestinationRequest.ValidateAll() if the
// designated constraints aren't met.
type WriteToDestinationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WriteToDestinationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WriteToDestinationRequestMultiError) AllErrors() []error { return m }

// WriteToDestinationRequestValidationError is the validation error returned by
// WriteToDestinationRequest.Validate if the designated constraints aren't met.
type WriteToDestinationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WriteToDestinationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WriteToDestinationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WriteToDestinationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WriteToDestinationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WriteToDestinationRequestValidationError) ErrorName() string {
	return "WriteToDestinationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WriteToDestinationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWriteToDestinationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WriteToDestinationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WriteToDestinationRequestValidationError{}

// Validate checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InitRequestMultiError, or
// nil if none found.
func (m *InitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAppName()) < 1 {
		err := InitRequestValidationError{
			field:  "AppName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetConfigFilePath()) < 1 {
		err := InitRequestValidationError{
			field:  "ConfigFilePath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Language_name[int32(m.GetLanguage())]; !ok {
		err := InitRequestValidationError{
			field:  "Language",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for GitSHA

	// no validation rules for TurbineVersion

	if len(errors) > 0 {
		return InitRequestMultiError(errors)
	}

	return nil
}

// InitRequestMultiError is an error wrapping multiple validation errors
// returned by InitRequest.ValidateAll() if the designated constraints aren't met.
type InitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InitRequestMultiError) AllErrors() []error { return m }

// InitRequestValidationError is the validation error returned by
// InitRequest.Validate if the designated constraints aren't met.
type InitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InitRequestValidationError) ErrorName() string { return "InitRequestValidationError" }

// Error satisfies the builtin error interface
func (e InitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InitRequestValidationError{}

// Validate checks the field values on RecordsCollection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RecordsCollection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordsCollection with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordsCollectionMultiError, or nil if none found.
func (m *RecordsCollection) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordsCollection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RecordsCollectionValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RecordsCollectionValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RecordsCollectionValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Stream

	if len(errors) > 0 {
		return RecordsCollectionMultiError(errors)
	}

	return nil
}

// RecordsCollectionMultiError is an error wrapping multiple validation errors
// returned by RecordsCollection.ValidateAll() if the designated constraints
// aren't met.
type RecordsCollectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordsCollectionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordsCollectionMultiError) AllErrors() []error { return m }

// RecordsCollectionValidationError is the validation error returned by
// RecordsCollection.Validate if the designated constraints aren't met.
type RecordsCollectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordsCollectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordsCollectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordsCollectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordsCollectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordsCollectionValidationError) ErrorName() string {
	return "RecordsCollectionValidationError"
}

// Error satisfies the builtin error interface
func (e RecordsCollectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordsCollection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordsCollectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordsCollectionValidationError{}

// Validate checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Record) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Record with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RecordMultiError, or nil if none found.
func (m *Record) ValidateAll() error {
	return m.validate(true)
}

func (m *Record) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := RecordValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RecordValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RecordValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RecordMultiError(errors)
	}

	return nil
}

// RecordMultiError is an error wrapping multiple validation errors returned by
// Record.ValidateAll() if the designated constraints aren't met.
type RecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordMultiError) AllErrors() []error { return m }

// RecordValidationError is the validation error returned by Record.Validate if
// the designated constraints aren't met.
type RecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordValidationError) ErrorName() string { return "RecordValidationError" }

// Error satisfies the builtin error interface
func (e RecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordValidationError{}

// Validate checks the field values on Configurations with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Configurations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Configurations with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigurationsMultiError,
// or nil if none found.
func (m *Configurations) ValidateAll() error {
	return m.validate(true)
}

func (m *Configurations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConfiguration() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigurationsValidationError{
						field:  fmt.Sprintf("Configuration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigurationsValidationError{
						field:  fmt.Sprintf("Configuration[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigurationsValidationError{
					field:  fmt.Sprintf("Configuration[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigurationsMultiError(errors)
	}

	return nil
}

// ConfigurationsMultiError is an error wrapping multiple validation errors
// returned by Configurations.ValidateAll() if the designated constraints
// aren't met.
type ConfigurationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationsMultiError) AllErrors() []error { return m }

// ConfigurationsValidationError is the validation error returned by
// Configurations.Validate if the designated constraints aren't met.
type ConfigurationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationsValidationError) ErrorName() string { return "ConfigurationsValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigurations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationsValidationError{}

// Validate checks the field values on Configuration with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Configuration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Configuration with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigurationMultiError, or
// nil if none found.
func (m *Configuration) ValidateAll() error {
	return m.validate(true)
}

func (m *Configuration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Value

	if len(errors) > 0 {
		return ConfigurationMultiError(errors)
	}

	return nil
}

// ConfigurationMultiError is an error wrapping multiple validation errors
// returned by Configuration.ValidateAll() if the designated constraints
// aren't met.
type ConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigurationMultiError) AllErrors() []error { return m }

// ConfigurationValidationError is the validation error returned by
// Configuration.Validate if the designated constraints aren't met.
type ConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigurationValidationError) ErrorName() string { return "ConfigurationValidationError" }

// Error satisfies the builtin error interface
func (e ConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigurationValidationError{}

// Validate checks the field values on ProcessRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessRecordsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessRecordsRequestMultiError, or nil if none found.
func (m *ProcessRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProcess() == nil {
		err := ProcessRecordsRequestValidationError{
			field:  "Process",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProcess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "Process",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessRecordsRequestValidationError{
				field:  "Process",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecords()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "Records",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProcessRecordsRequestValidationError{
					field:  "Records",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecords()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProcessRecordsRequestValidationError{
				field:  "Records",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProcessRecordsRequestMultiError(errors)
	}

	return nil
}

// ProcessRecordsRequestMultiError is an error wrapping multiple validation
// errors returned by ProcessRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ProcessRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessRecordsRequestMultiError) AllErrors() []error { return m }

// ProcessRecordsRequestValidationError is the validation error returned by
// ProcessRecordsRequest.Validate if the designated constraints aren't met.
type ProcessRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessRecordsRequestValidationError) ErrorName() string {
	return "ProcessRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessRecordsRequestValidationError{}

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SecretValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := SecretValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on GetSpecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSpecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSpecRequestMultiError,
// or nil if none found.
func (m *GetSpecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Image

	if len(errors) > 0 {
		return GetSpecRequestMultiError(errors)
	}

	return nil
}

// GetSpecRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpecRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecRequestMultiError) AllErrors() []error { return m }

// GetSpecRequestValidationError is the validation error returned by
// GetSpecRequest.Validate if the designated constraints aren't met.
type GetSpecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecRequestValidationError) ErrorName() string { return "GetSpecRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSpecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecRequestValidationError{}

// Validate checks the field values on GetSpecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpecResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpecResponseMultiError, or nil if none found.
func (m *GetSpecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Spec

	if len(errors) > 0 {
		return GetSpecResponseMultiError(errors)
	}

	return nil
}

// GetSpecResponseMultiError is an error wrapping multiple validation errors
// returned by GetSpecResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSpecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpecResponseMultiError) AllErrors() []error { return m }

// GetSpecResponseValidationError is the validation error returned by
// GetSpecResponse.Validate if the designated constraints aren't met.
type GetSpecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpecResponseValidationError) ErrorName() string { return "GetSpecResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSpecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpecResponseValidationError{}

// Validate checks the field values on ProcessRecordsRequest_Process with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessRecordsRequest_Process) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessRecordsRequest_Process with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ProcessRecordsRequest_ProcessMultiError, or nil if none found.
func (m *ProcessRecordsRequest_Process) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessRecordsRequest_Process) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ProcessRecordsRequest_ProcessMultiError(errors)
	}

	return nil
}

// ProcessRecordsRequest_ProcessMultiError is an error wrapping multiple
// validation errors returned by ProcessRecordsRequest_Process.ValidateAll()
// if the designated constraints aren't met.
type ProcessRecordsRequest_ProcessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessRecordsRequest_ProcessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessRecordsRequest_ProcessMultiError) AllErrors() []error { return m }

// ProcessRecordsRequest_ProcessValidationError is the validation error
// returned by ProcessRecordsRequest_Process.Validate if the designated
// constraints aren't met.
type ProcessRecordsRequest_ProcessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessRecordsRequest_ProcessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessRecordsRequest_ProcessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessRecordsRequest_ProcessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessRecordsRequest_ProcessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessRecordsRequest_ProcessValidationError) ErrorName() string {
	return "ProcessRecordsRequest_ProcessValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessRecordsRequest_ProcessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessRecordsRequest_Process.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessRecordsRequest_ProcessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessRecordsRequest_ProcessValidationError{}
